shiny::runApp()
library(shiny)
library(leaflet)
library(readxl)
# Load dataset
data <- read_excel("dataset.xlsx")
data$Latitude
data$Latitude <- as.numeric(data$Latitude)
data$Longitude <- as.numeric(data$Longitude)
runApp()
# Load dataset
data <- read_excel("dataset.xlsx")
data$Latitude <- as.numeric(data$Latitude)
data$Longitude <- as.numeric(data$Longitude)
names(data)
runApp()
runApp()
data$Longitude
# Load dataset
data <- read_excel("dataset.xlsx")
data$Longitude
is.na(data$Longitude)
# Load dataset
data <- read_excel("dataset.xlsx")
data<-data[-which(is.na(data$Longitude)),]
data$Latitude <- as.numeric(data$Latitude)
data$Longitude <- as.numeric(data$Longitude)
# Load dataset
data <- read_excel("dataset.xlsx")
i<-1
for(i in 1:nrow(data)){
data$Latitude[i] <- as.numeric(data$Latitude[i])
data$Longitude[i] <- as.numeric(data$Longitude[i])
}
library(shiny)
library(leaflet)
library(readxl)
# Load dataset
data <- read_excel("dataset.xlsx")
data<-data[-which(is.na(data$Longitude)),]
i<-1
options(warn=2)
for(i in 1:nrow(data)){
data$Latitude[i] <- as.numeric(data$Latitude[i])
data$Longitude[i] <- as.numeric(data$Longitude[i])
}
data$Latitude[i]
data$Longitude[i]
library(shiny)
library(leaflet)
library(readxl)
# Load dataset
data <- read_excel("dataset.xlsx")
data<-data[-which(is.na(data$Longitude)),]
i<-1
options(warn=2)
for(i in 1:nrow(data)){
data$Latitude[i] <- as.numeric(data$Latitude[i])
data$Longitude[i] <- as.numeric(data$Longitude[i])
}
runApp()
data$`Water Body2`
as.factor(data$`Water Body2`)
runApp()
runApp()
library(shiny)
library(leaflet)
library(readxl)
library(sf)
# Load point dataset
data <- read_excel("dataset.xlsx")
data <- data[!is.na(data$Longitude), ]
data$Latitude <- as.numeric(data$Latitude)
data$Longitude <- as.numeric(data$Longitude)
# Load only North Sea polygon
seas <- st_read("sf/World_Seas_IHO_v3.shp", quiet = TRUE)
seas$geoName
seas$geoName
seas
seas$geoName
str(seas)
seas$Name
runApp()
library(shiny)
library(leaflet)
library(readxl)
library(sf)
# Load point dataset
data <- read_excel("dataset.xlsx")
data <- data[!is.na(data$Longitude), ]
data$Latitude <- as.numeric(data$Latitude)
data$Longitude <- as.numeric(data$Longitude)
# Load only North Sea polygon
seas <- st_read("sf/World_Seas_IHO_v3.shp", quiet = TRUE)
north_sea <- seas[seas$NAME == "North Sea", ]
north_sea
north_sea
runApp()
runApp()
runApp()
data
data$`Water Body2`
library(shiny)
library(leaflet)
library(readxl)
library(sf)
library(shiny)
library(leaflet)
library(readxl)
library(sf)
# Load point dataset
data <- read_excel("dataset.xlsx")
data <- data[!is.na(data$Longitude), ]
data$Latitude <- as.numeric(data$Latitude)
data$Longitude <- as.numeric(data$Longitude)
# Load only North Sea polygon
seas <- st_read("sf/World_Seas_IHO_v3.shp", quiet = TRUE)
north_sea <- seas[seas$NAME == "North Sea", ]
unique_bodies
unique_bodies
seas$NAME
seas$NAME %in% data$`Water Body2`
matched_seas <- seas[seas$NAME %in% data$`Water Body2`, ]
matched_seas
runApp()
runApp()
runApp()
data$`Water Body2`
seas$NAME
library(shiny)
library(leaflet)
library(readxl)
library(sf)
library(shinycssloaders)
# Load point dataset
data <- read_excel("dataset.xlsx")
data <- data[!is.na(data$Longitude), ]
data$Latitude <- as.numeric(data$Latitude)
data$Longitude <- as.numeric(data$Longitude)
# Load only North Sea polygon
seas <- st_read("sf/World_Seas_IHO_v3.shp", quiet = TRUE)
north_sea <- seas[seas$NAME == "North Sea", ]
seas$NAME %in% data$`Water Body2`
seas$NAME %in% data$`Water Body_Standardized`
matched_seas <- seas[seas$NAME %in% data$`Water Body_Standardized`, ]
ui <- fluidPage(
titlePanel("Marine Dataset Map (with North Sea Polygon)"),
withSpinner(leafletOutput("map", height = "90vh"), type = 6, color = "#007bff")
)
server <- function(input, output, session) {
# Read shapefile and filter only relevant seas
seas <- st_read("sf/World_Seas_IHO_v3.shp", quiet = TRUE)
matched_seas <- seas[seas$NAME %in% unique(data$`Water Body2`), ]
output$map <- renderLeaflet({
leaflet() %>%
# Base layers
addProviderTiles(providers$Esri.OceanBasemap, group = "Ocean Basemap") %>%
addProviderTiles(providers$Esri.WorldImagery, group = "Satellite") %>%
addProviderTiles(providers$CartoDB.Positron, group = "Positron") %>%
addProviderTiles(providers$OpenTopoMap, group = "Topo Map") %>%
# Sea polygons
addPolygons(
data = matched_seas,
color = "darkblue",
weight = 1,
fillOpacity = 0.3,
label = ~NAME,
group = "Matched Seas"
) %>%
# Data points
addCircleMarkers(
data = data,
lng = ~Longitude,
lat = ~Latitude,
radius = 5,
color = "darkblue",
stroke = FALSE,
fillOpacity = 0.7,
popup = ~paste(
"<strong>Reference:</strong>", `Analytes (ng/L)`, "<br>",
"<strong>Ocean:</strong>", Ocean2
),
group = "Points"
) %>%
# Layer control
addLayersControl(
baseGroups = c("Ocean Basemap", "Satellite", "Positron", "Topo Map"),
overlayGroups = c("Matched Seas", "Points"),
options = layersControlOptions(collapsed = FALSE)
)
})
}
shinyApp(ui, server)
library(shiny)
library(leaflet)
library(readxl)
library(sf)
library(shinycssloaders)
# Load point dataset
data <- read_excel("dataset.xlsx")
data <- data[!is.na(data$Longitude), ]
data$Latitude <- as.numeric(data$Latitude)
data$Longitude <- as.numeric(data$Longitude)
# Load only North Sea polygon
seas <- st_read("sf/World_Seas_IHO_v3.shp", quiet = TRUE)
data$`Water Body_Standardized`
data$`Water Body_Standardized`
seas$NAME %in% data$`Water Body_Standardized`
which(seas$NAME %in% data$`Water Body_Standardized`)
matched_seas$NAME
matched_seas
runApp()
runApp()
matched_seas$NAME
data$`Water Body_Standardized`
unique(data$`Water Body_Standardized`)
matched_seas$NAME
matched_seas <- seas[seas$NAME %in% data$`Water Body_Standardized`]
matched_seas <- seas[seas$NAME %in% data$`Water Body_Standardized`, ]
matched_seas$NAME
runApp()
leaflet()
leaflet()
st_write(matched_seas, "www/matched_seas.geojson", driver = "GeoJSON", delete_dsn = TRUE)
runApp()
runApp()
runApp()
library(shiny)
library(leaflet)
library(readxl)
library(sf)
library(shinycssloaders)
# Load point dataset
data <- read_excel("dataset.xlsx")
data <- data[!is.na(data$Longitude), ]
data$Latitude <- as.numeric(data$Latitude)
data$Longitude <- as.numeric(data$Longitude)
matched_seas <- st_read("www/matched_seas.geojson", quiet = TRUE)
matched_seas <- st_read("www/matched_seas.geojson", quiet = TRUE)
matched_seas <- st_read("www/matched_seas.geojson", quiet = TRUE)
list.files("www", full.names = TRUE)
#Create matched_seas.geojson
seas <- st_read("sf/World_Seas_IHO_v3.shp", quiet = TRUE)
north_sea <- seas[seas$NAME == "North Sea", ]
matched_seas <- seas[seas$NAME %in% data$`Water Body_Standardized`, ]
matched_seas$NAME
st_write(matched_seas, "www/matched_seas.geojson", driver = "GeoJSON", delete_dsn = TRUE)
st_write(matched_seas, "www/matched_seas2.geojson", driver = "GeoJSON", delete_dsn = TRUE)
matched_seas2 <- st_read("www/matched_seas2.geojson", quiet = TRUE)
?st_read
matched_seas2 <- st_read("www/matched_seas2.geojson")
matched_seas2 <- st_read("www/matched_seas2.geojson", quiet = TRUE)
#Create matched_seas.geojson
seas <- st_read("sf/World_Seas_IHO_v3.shp", quiet = TRUE)
north_sea <- seas[seas$NAME == "North Sea", ]
matched_seas <- seas[seas$NAME %in% data$`Water Body_Standardized`, ]
matched_seas$NAME
matched_seas_simplified <- st_simplify(matched_seas, dTolerance = 0.05, preserveTopology = TRUE)
matched_seas_simplified <- st_simplify(matched_seas, dTolerance = 0.05, preserveTopology = TRUE)
# Reproject to a metric CRS (e.g., Robinson)
matched_seas_proj <- st_transform(matched_seas, crs = 54030)  # Robinson projection
# Reproject to a metric CRS (e.g., Robinson)
matched_seas_proj <- st_transform(matched_seas, crs = 54030)  # Robinson projection
# Simplify using meter-based tolerance (e.g., 5000 meters)
matched_seas_simplified <- st_simplify(matched_seas_proj, dTolerance = 5000, preserveTopology = TRUE)
seas <- st_read("sf/World_Seas_IHO_v3.shp", quiet = TRUE)
north_sea <- seas[seas$NAME == "North Sea", ]
matched_seas <- seas[seas$NAME %in% data$`Water Body_Standardized`, ]
matched_seas$NAME
# Reproject to a metric CRS (e.g., Robinson)
matched_seas_proj <- st_transform(matched_seas, crs = 54030)  # Robinson projection
# Reproject to Web Mercator (EPSG:3857)
matched_seas_proj <- st_transform(matched_seas, crs = 3857)
# Simplify geometry with a 5 km tolerance
matched_seas_simplified <- st_simplify(matched_seas_proj, dTolerance = 5000, preserveTopology = TRUE)
# Reproject back to WGS84 for GeoJSON export
matched_seas_simplified <- st_transform(matched_seas_simplified, crs = 4326)
# Save as GeoJSON for fast loading in Shiny
st_write(matched_seas_simplified, "www/matched_seas_simplified.geojson", driver = "GeoJSON", delete_dsn = TRUE)
matched_seas2 <- st_read("www/matched_seas_simplified.geojson", quiet = TRUE)
runApp()
library(leafem)
runApp()
leaflet() %>%
addTiles() %>%
addGeoJSON(
geojson = "www/matched_seas_simplified.geojson",
color = "red",
weight = 1,
fillOpacity = 0.3,
group = "Matched Seas"
)
install.packages("leafem")
shiny::runApp()
# Read shapefile and filter only relevant seas
matched_seas_geojson <- geojson_read("www/matched_seas_simplified.geojson", what = "sp")
geojson_read
library(shiny)
library(leaflet)
library(readxl)
library(sf)
library(shinycssloaders)
library(leafem)
# Read shapefile and filter only relevant seas
matched_seas_geojson <- st_read("www/matched_seas_simplified.geojson", what = "sp")
runApp()
# Read shapefile and filter only relevant seas
matched_seas_geojson <- geojson_read("www/matched_seas_simplified.geojson", what = "sp")
install.packages("geojsonio")
library(geojsonio)
# Read shapefile and filter only relevant seas
matched_seas_geojson <- geojson_read("www/matched_seas_simplified.geojson", what = "sp")
runApp()
# Convert markers to sf object
points_sf <- st_as_sf(data, coords = c("Longitude", "Latitude"), crs = 4326)
st_write(points_sf, "www/points.geojson", driver = "GeoJSON", delete_dsn = TRUE)
runApp()
# Convert markers to sf object
points_sf <- st_as_sf(data, coords = c("Longitude", "Latitude"), crs = 4326)
points_sf <- points_sf %>%
mutate(popup = paste0(
"<strong>Reference:</strong> ", `Analytes (ng/L)`, "<br>",
"<strong>Ocean:</strong> ", Ocean2
))
# Load point dataset
data <- read_excel("dataset.xlsx")
library(dplyr)
# Load point dataset
data <- read_excel("dataset.xlsx")
data <- data[!is.na(data$Longitude), ]
data$Latitude <- as.numeric(data$Latitude)
data$Longitude <- as.numeric(data$Longitude)
# Convert markers to sf object
points_sf <- st_as_sf(data, coords = c("Longitude", "Latitude"), crs = 4326)
points_sf <- points_sf %>%
mutate(popup = paste0(
"<strong>Reference:</strong> ", `Analytes (ng/L)`, "<br>",
"<strong>Ocean:</strong> ", Ocean2
))
st_write(points_sf, "www/points.geojson", driver = "GeoJSON", delete_dsn = TRUE)
runApp()
shiny::runApp()
library(readxl)
contaminants <- read_excel("Chemical occurrence review ONE-BLUE.xlsx", sheet = "Occurrence")
View(contaminants)
contaminants <- contaminants[-c(1:6), ]
View(contaminants)
contaminants <- contaminants[,-c(2:15)]
library(readxl)
contaminants <- read_excel("Chemical occurrence review ONE-BLUE.xlsx", sheet = "Occurrence")
contaminants <- contaminants[-c(1:6), ]
contaminants <- contaminants[,-c(2:18)]
View(contaminants)
contaminants <- t(contaminants)
contaminants <- as.data.frame(contaminants)
names(contaminants) <- contaminants[1,]
contaminants <- contaminants[-c(1:4), ]
contaminants$area<-row.names(contaminants)
contaminants <- contaminants[,c(ncol(contaminants),1:c(ncol(contaminants)-1))]
names(contaminants)[2]<-"lat"
names(contaminants)[3]<-"lng"
names(contaminants)[4]<-"contributor"
contaminants$total<-"River water"
contaminants <- contaminants[,c(1,3,2,4,ncol(contaminants),c(6:ncol(contaminants)-1))]
row.names(contaminants)<-NULL
contaminants$lng <- as.numeric(contaminants$lng)
contaminants$lat <- as.numeric(contaminants$lat)
contaminants$`Estradiol (E2)`
contaminants -> eco2mix
save.image("data.RData")
library(shiny); runApp('App_occurrence.R')
runApp('App_occurrence.R')
runApp('App_occurrence.R')
